#include "convolutional_layer.h"
#include "utils.h"
#include "batchnorm_layer.h"
#include "im2col.h"
#include "col2im.h"
#include "blas.h"
#include "gemm.h"
#include <stdio.h>
#include <time.h>

#ifdef AI2
#include "xnor_layer.h"
#endif

void swap_binary(convolutional_layer *l)
{
    float *swap = l->weights;
    l->weights = l->binary_weights;
    l->binary_weights = swap;

#ifdef GPU
    swap = l->weights_gpu;
    l->weights_gpu = l->binary_weights_gpu;
    l->binary_weights_gpu = swap;
#endif
}

void binarize_weights(float *weights, int n, int size, float *binary)
{
    int i, f;
    for (f = 0; f < n; ++f)
    {
        float mean = 0;
        for (i = 0; i < size; ++i)
        {
            mean += fabs(weights[f * size + i]);
        }
        mean = mean / size;
        for (i = 0; i < size; ++i)
        {
            binary[f * size + i] = (weights[f * size + i] > 0) ? mean : -mean;
        }
    }
}

void binarize_cpu(float *input, int n, float *binary)
{
    int i;
    for (i = 0; i < n; ++i)
    {
        binary[i] = (input[i] > 0) ? 1 : -1;
    }
}

void binarize_input(float *input, int n, int size, float *binary)
{
    int i, s;
    for (s = 0; s < size; ++s)
    {
        float mean = 0;
        for (i = 0; i < n; ++i)
        {
            mean += fabs(input[i * size + s]);
        }
        mean = mean / n;
        for (i = 0; i < n; ++i)
        {
            binary[i * size + s] = (input[i * size + s] > 0) ? mean : -mean;
        }
    }
}
int convolutional_out_height_direct(convolutional_layer l)
{
    return (l.h - l.size) + 1;
}

int convolutional_out_width_direct(convolutional_layer l)
{
    return (l.w - l.size) + 1;
}

int convolutional_out_height(convolutional_layer l)
{
    return (l.h + 2 * l.pad - l.size) / l.stride + 1;
}

int convolutional_out_width(convolutional_layer l)
{
    return (l.w + 2 * l.pad - l.size) / l.stride + 1;
}

image get_convolutional_image(convolutional_layer l)
{
    return float_to_image(l.out_w, l.out_h, l.out_c, l.output);
}

image get_convolutional_delta(convolutional_layer l)
{
    return float_to_image(l.out_w, l.out_h, l.out_c, l.delta);
}

static size_t get_workspace_size(layer l)
{
#ifdef CUDNN
    if (gpu_index >= 0)
    {
        size_t most = 0;
        size_t s = 0;
        cudnnGetConvolutionForwardWorkspaceSize(cudnn_handle(),
                                                l.srcTensorDesc,
                                                l.weightDesc,
                                                l.convDesc,
                                                l.dstTensorDesc,
                                                l.fw_algo,
                                                &s);
        if (s > most)
            most = s;
        cudnnGetConvolutionBackwardFilterWorkspaceSize(cudnn_handle(),
                                                       l.srcTensorDesc,
                                                       l.ddstTensorDesc,
                                                       l.convDesc,
                                                       l.dweightDesc,
                                                       l.bf_algo,
                                                       &s);
        if (s > most)
            most = s;
        cudnnGetConvolutionBackwardDataWorkspaceSize(cudnn_handle(),
                                                     l.weightDesc,
                                                     l.ddstTensorDesc,
                                                     l.convDesc,
                                                     l.dsrcTensorDesc,
                                                     l.bd_algo,
                                                     &s);
        if (s > most)
            most = s;
        return most;
    }
#endif
    return (size_t)l.out_h * l.out_w * l.size * l.size * l.c / l.groups * sizeof(float);
}

#ifdef GPU
#ifdef CUDNN
void cudnn_convolutional_setup(layer *l)
{
    cudnnSetTensor4dDescriptor(l->dsrcTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, l->batch, l->c, l->h, l->w);
    cudnnSetTensor4dDescriptor(l->ddstTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, l->batch, l->out_c, l->out_h, l->out_w);

    cudnnSetTensor4dDescriptor(l->srcTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, l->batch, l->c, l->h, l->w);
    cudnnSetTensor4dDescriptor(l->dstTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, l->batch, l->out_c, l->out_h, l->out_w);
    cudnnSetTensor4dDescriptor(l->normTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, 1, l->out_c, 1, 1);

    cudnnSetFilter4dDescriptor(l->dweightDesc, CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, l->n, l->c / l->groups, l->size, l->size);
    cudnnSetFilter4dDescriptor(l->weightDesc, CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, l->n, l->c / l->groups, l->size, l->size);
#if CUDNN_MAJOR >= 6
    cudnnSetConvolution2dDescriptor(l->convDesc, l->pad, l->pad, l->stride, l->stride, 1, 1, CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT);
#else
    cudnnSetConvolution2dDescriptor(l->convDesc, l->pad, l->pad, l->stride, l->stride, 1, 1, CUDNN_CROSS_CORRELATION);
#endif

#if CUDNN_MAJOR >= 7
    cudnnSetConvolutionGroupCount(l->convDesc, l->groups);
#else
    if (l->groups > 1)
    {
        error("CUDNN < 7 doesn't support groups, please upgrade!");
    }
#endif

    cudnnGetConvolutionForwardAlgorithm(cudnn_handle(),
                                        l->srcTensorDesc,
                                        l->weightDesc,
                                        l->convDesc,
                                        l->dstTensorDesc,
                                        CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT,
                                        2000000000,
                                        &l->fw_algo);
    cudnnGetConvolutionBackwardDataAlgorithm(cudnn_handle(),
                                             l->weightDesc,
                                             l->ddstTensorDesc,
                                             l->convDesc,
                                             l->dsrcTensorDesc,
                                             CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT,
                                             2000000000,
                                             &l->bd_algo);
    cudnnGetConvolutionBackwardFilterAlgorithm(cudnn_handle(),
                                               l->srcTensorDesc,
                                               l->ddstTensorDesc,
                                               l->convDesc,
                                               l->dweightDesc,
                                               CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT,
                                               2000000000,
                                               &l->bf_algo);
}
#endif
#endif

convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)
{
    int i;
    convolutional_layer l = {0};
    l.type = CONVOLUTIONAL;

    l.groups = groups;
    l.h = h;
    l.w = w;
    l.c = c;
    l.n = n;
    l.binary = binary;
    l.xnor = xnor;
    l.batch = batch;
    l.stride = stride;
    l.size = size;
    l.pad = padding;
    l.batch_normalize = batch_normalize;

    l.weights = calloc(c / groups * n * size * size, sizeof(float));
    l.weight_updates = calloc(c / groups * n * size * size, sizeof(float));
    //  #ifdef nhwc
    l.weights_hwcm = calloc(size * size * n * c / groups, sizeof(float));
    // #endif
    l.biases = calloc(n, sizeof(float));
    l.bias_updates = calloc(n, sizeof(float));

    l.nweights = c / groups * n * size * size;
    l.nbiases = n;

    // float scale = 1./sqrt(size*size*c);
    float scale = sqrt(2. / (size * size * c / l.groups));
    // printf("convscale %f\n", scale);
    // scale = .02;
    // for(i = 0; i < c*n*size*size; ++i) l.weights[i] = scale*rand_uniform(-1, 1);
    for (i = 0; i < l.nweights; ++i)
        l.weights[i] = scale * rand_normal();
    int out_w = convolutional_out_width(l);
    int out_h = convolutional_out_height(l);
    // int out_w = convolutional_out_width_direct(l);
    // int out_h = convolutional_out_height_direct(l);

    l.out_h = out_h;
    l.out_w = out_w;
    l.out_c = n;
    l.outputs = l.out_h * l.out_w * l.out_c;
    l.inputs = l.w * l.h * l.c;

    l.output = calloc(l.batch * l.outputs, sizeof(float));
    l.delta = calloc(l.batch * l.outputs, sizeof(float));

    l.forward = forward_convolutional_layer;
    l.backward = backward_convolutional_layer;
    l.update = update_convolutional_layer;
    if (binary)
    {
        l.binary_weights = calloc(l.nweights, sizeof(float));
        l.cweights = calloc(l.nweights, sizeof(char));
        l.scales = calloc(n, sizeof(float));
    }
    if (xnor)
    {
        l.binary_weights = calloc(l.nweights, sizeof(float));
        l.binary_input = calloc(l.inputs * l.batch, sizeof(float));
    }

    if (batch_normalize)
    {
        l.scales = calloc(n, sizeof(float));
        l.scale_updates = calloc(n, sizeof(float));
        for (i = 0; i < n; ++i)
        {
            l.scales[i] = 1;
        }

        l.mean = calloc(n, sizeof(float));
        l.variance = calloc(n, sizeof(float));

        l.mean_delta = calloc(n, sizeof(float));
        l.variance_delta = calloc(n, sizeof(float));

        l.rolling_mean = calloc(n, sizeof(float));
        l.rolling_variance = calloc(n, sizeof(float));
        l.x = calloc(l.batch * l.outputs, sizeof(float));
        l.x_norm = calloc(l.batch * l.outputs, sizeof(float));
    }
    if (adam)
    {
        l.m = calloc(l.nweights, sizeof(float));
        l.v = calloc(l.nweights, sizeof(float));
        l.bias_m = calloc(n, sizeof(float));
        l.scale_m = calloc(n, sizeof(float));
        l.bias_v = calloc(n, sizeof(float));
        l.scale_v = calloc(n, sizeof(float));
    }

#ifdef GPU
    l.forward_gpu = forward_convolutional_layer_gpu;
    l.backward_gpu = backward_convolutional_layer_gpu;
    l.update_gpu = update_convolutional_layer_gpu;

    if (gpu_index >= 0)
    {
        if (adam)
        {
            l.m_gpu = cuda_make_array(l.m, l.nweights);
            l.v_gpu = cuda_make_array(l.v, l.nweights);
            l.bias_m_gpu = cuda_make_array(l.bias_m, n);
            l.bias_v_gpu = cuda_make_array(l.bias_v, n);
            l.scale_m_gpu = cuda_make_array(l.scale_m, n);
            l.scale_v_gpu = cuda_make_array(l.scale_v, n);
        }

        l.weights_gpu = cuda_make_array(l.weights, l.nweights);
        l.weight_updates_gpu = cuda_make_array(l.weight_updates, l.nweights);

        l.biases_gpu = cuda_make_array(l.biases, n);
        l.bias_updates_gpu = cuda_make_array(l.bias_updates, n);

        l.delta_gpu = cuda_make_array(l.delta, l.batch * out_h * out_w * n);
        l.output_gpu = cuda_make_array(l.output, l.batch * out_h * out_w * n);

        if (binary)
        {
            l.binary_weights_gpu = cuda_make_array(l.weights, l.nweights);
        }
        if (xnor)
        {
            l.binary_weights_gpu = cuda_make_array(l.weights, l.nweights);
            l.binary_input_gpu = cuda_make_array(0, l.inputs * l.batch);
        }

        if (batch_normalize)
        {
            l.mean_gpu = cuda_make_array(l.mean, n);
            l.variance_gpu = cuda_make_array(l.variance, n);

            l.rolling_mean_gpu = cuda_make_array(l.mean, n);
            l.rolling_variance_gpu = cuda_make_array(l.variance, n);

            l.mean_delta_gpu = cuda_make_array(l.mean, n);
            l.variance_delta_gpu = cuda_make_array(l.variance, n);

            l.scales_gpu = cuda_make_array(l.scales, n);
            l.scale_updates_gpu = cuda_make_array(l.scale_updates, n);

            l.x_gpu = cuda_make_array(l.output, l.batch * out_h * out_w * n);
            l.x_norm_gpu = cuda_make_array(l.output, l.batch * out_h * out_w * n);
        }
#ifdef CUDNN
        cudnnCreateTensorDescriptor(&l.normTensorDesc);
        cudnnCreateTensorDescriptor(&l.srcTensorDesc);
        cudnnCreateTensorDescriptor(&l.dstTensorDesc);
        cudnnCreateFilterDescriptor(&l.weightDesc);
        cudnnCreateTensorDescriptor(&l.dsrcTensorDesc);
        cudnnCreateTensorDescriptor(&l.ddstTensorDesc);
        cudnnCreateFilterDescriptor(&l.dweightDesc);
        cudnnCreateConvolutionDescriptor(&l.convDesc);
        cudnn_convolutional_setup(&l);
#endif
    }
#endif
    l.workspace_size = get_workspace_size(l);
    l.activation = activation;

    fprintf(stderr, "conv  %5d %2d x%2d /%2d  %4d x%4d x%4d   ->  %4d x%4d x%4d  %5.3f BFLOPs\n", n, size, size, stride, w, h, c, l.out_w, l.out_h, l.out_c, (2.0 * l.n * l.size * l.size * l.c / l.groups * l.out_h * l.out_w) / 1000000000.);

    return l;
}

void denormalize_convolutional_layer(convolutional_layer l)
{
    int i, j;
    for (i = 0; i < l.n; ++i)
    {
        float scale = l.scales[i] / sqrt(l.rolling_variance[i] + .00001);
        for (j = 0; j < l.c / l.groups * l.size * l.size; ++j)
        {
            l.weights[i * l.c / l.groups * l.size * l.size + j] *= scale;
        }
        l.biases[i] -= l.rolling_mean[i] * scale;
        l.scales[i] = 1;
        l.rolling_mean[i] = 0;
        l.rolling_variance[i] = 1;
    }
}

/*
void test_convolutional_layer()
{
    convolutional_layer l = make_convolutional_layer(1, 5, 5, 3, 2, 5, 2, 1, LEAKY, 1, 0, 0, 0);
    l.batch_normalize = 1;
    float data[] = {1,1,1,1,1,
        1,1,1,1,1,
        1,1,1,1,1,
        1,1,1,1,1,
        1,1,1,1,1,
        2,2,2,2,2,
        2,2,2,2,2,
        2,2,2,2,2,
        2,2,2,2,2,
        2,2,2,2,2,
        3,3,3,3,3,
        3,3,3,3,3,
        3,3,3,3,3,
        3,3,3,3,3,
        3,3,3,3,3};
    //net.input = data;
    //forward_convolutional_layer(l);
}
*/

void resize_convolutional_layer(convolutional_layer *l, int w, int h)
{
    l->w = w;
    l->h = h;
    int out_w = convolutional_out_width(*l);
    int out_h = convolutional_out_height(*l);
    // int out_w = convolutional_out_width_direct(*l);
    // int out_h = convolutional_out_height_direct(*l);

    l->out_w = out_w;
    l->out_h = out_h;

    l->outputs = l->out_h * l->out_w * l->out_c;
    l->inputs = l->w * l->h * l->c;

    l->output = realloc(l->output, l->batch * l->outputs * sizeof(float));
    l->delta = realloc(l->delta, l->batch * l->outputs * sizeof(float));
    if (l->batch_normalize)
    {
        l->x = realloc(l->x, l->batch * l->outputs * sizeof(float));
        l->x_norm = realloc(l->x_norm, l->batch * l->outputs * sizeof(float));
    }

#ifdef GPU
    cuda_free(l->delta_gpu);
    cuda_free(l->output_gpu);

    l->delta_gpu = cuda_make_array(l->delta, l->batch * l->outputs);
    l->output_gpu = cuda_make_array(l->output, l->batch * l->outputs);

    if (l->batch_normalize)
    {
        cuda_free(l->x_gpu);
        cuda_free(l->x_norm_gpu);

        l->x_gpu = cuda_make_array(l->output, l->batch * l->outputs);
        l->x_norm_gpu = cuda_make_array(l->output, l->batch * l->outputs);
    }
#ifdef CUDNN
    cudnn_convolutional_setup(l);
#endif
#endif
    l->workspace_size = get_workspace_size(*l);
}

void add_bias(float *output, float *biases, int batch, int n, int size)
{
    int i, j, b;
    for (b = 0; b < batch; ++b)
    {
        for (i = 0; i < n; ++i)
        {
            for (j = 0; j < size; ++j)
            {
                output[(b * n + i) * size + j] += biases[i];
            }
        }
    }
}

void add_bias_direct(float *output, float *biases, int batch, int n, int size)
{
    int i, j, b;
    printf("batch in add_bias= %d\n", batch);
    for (b = 0; b < batch; ++b)
    {
        for (j = 0; j < size; ++j)
        {
            for (i = 0; i < n; ++i)
            {
                // output[b * n * size + i * size] += biases[i];
                output[b * n * size + j * n + i] += biases[i];
                // output[(b * n + i) * size + j] += biases[i];
            }
        }
    }
}
void scale_bias_direct(float *output, float *scales, int batch, int n, int size)
{
    int i, j, b;
    for (b = 0; b < batch; ++b)
    {
        for (j = 0; j < size; ++j)
        {
            for (i = 0; i < n; ++i)
            {
                output[b * n * size + j * n + i] *= scales[i];
                // output[(b * n + i) * size + j] *= scales[i];
            }
        }
    }
}
void scale_bias(float *output, float *scales, int batch, int n, int size)
{
    int i, j, b;
    for (b = 0; b < batch; ++b)
    {
        for (i = 0; i < n; ++i)
        {
            for (j = 0; j < size; ++j)
            {
                output[(b * n + i) * size + j] *= scales[i];
            }
        }
    }
}

void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)
{
    int i, b;
    for (b = 0; b < batch; ++b)
    {
        for (i = 0; i < n; ++i)
        {
            bias_updates[i] += sum_array(delta + size * (i + b * n), size);
        }
    }
}

#if DIRECT_Cold
void forward_convolutional_layer(convolutional_layer l, network net)
{
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    // int out_h = convolutional_out_height_direct(l);
    // int out_w = convolutional_out_width_direct(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
    if (l.xnor)
    {
        printf("going in xnor\n\n");
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }
    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;

    // changed the layout of input and weight from NCHW -> NHWC
    /*for (int i = 0; i < l.batch; ++i) // batch always 1
    {
        for (int j = 0; j < l.groups; ++j) // groups always 1
        {
            float *a = l.weights_hwcm + j * l.nweights / l.groups; //weight matrix
            // float *a = l.weights  + j * l.nweights / l.groups;
            //  float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m; //output
            // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; //input matrix
            //Following Listing 2 order loops
            for (int oh = 0; oh < out_h; oh++) // output height
            {
                for (int kh = 0; kh < l.size; kh++) // kernel height
                {
                    int ih = oh * l.stride + kh - l.pad;
                    //oh  + kh - l.pad;
                    for (int kw = 0; kw < l.size; kw++) // kernel width
                    {
                        for (int ic = 0; ic < l.c; ic++) // input channel;
                        {
                            for (int ow = 0; ow < out_w; ow++) // output width
                            {
                                int iw = ow * l.stride + kw - l.pad;
                                for (int oc = 0; oc < m; oc++) // output channel
                                {
                                    if((ih < 0 ) || (ih >= l.h) ||(iw < 0) || (iw >= l.w))
                                    {
                                        c[oh * out_w * m + ow * m + oc] += 0.0;
                                    }
                                    else{
                                    c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];}
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }
                    }
                }
            }
        }
    }*/
    int index = 0;
    for (int i = 0; i < l.batch; ++i) // batch always 1
    {
        for (int j = 0; j < l.groups; ++j) // groups always 1
        {
            float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
            // float *a = l.weights  + j * l.nweights / l.groups;
            //  float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m; // output
            // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
            // Following Listing 2 order loops
            for (int oc = 0; oc < m; oc++) // output channel
            {
                for (int ic = 0; ic < l.c; ic++) // input channe;
                {
                    for (int oh = 0; oh < out_h; oh++) // output height
                    {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;
                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    if (l.pad == 0)
                                    {
                                        c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                    }
                                    else
                                    {

                                        if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                        {
                                            c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                            
                                        }
                                        else
                                        {
                                            c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                        }
                                    }
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // int oc = 2;

    // int ic = 2;
    // int ih = 2 ;
    // int iw = 2;
    // int oh = 2 ;
    // int ow = 3;
    //   int kh = 0;
    //   int kw = 0;
    //  printf("index = %d value = %f\n", oh*out_w*m + ow*m + oc, l.output[oh*out_w*m + ow*m + oc]);
    //   printf("index weights = %d value = %f\n",  (kh*l.size*l.c*m + kw*l.c*m + ic*m + oc), l.weights_hwcm[ kh*l.size*l.c*m + kw*l.c*m + ic*m + oc]);
    //  printf("index input = %d value = %f\n", (ih * out_w * l.c + iw * l.c + ic), net.input[ih * out_w * l.c + iw * l.c + ic]);
    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    /*for (int oc = 0; oc < m; oc++) // output channel
    {
        for (int oh = 0; oh < out_h; oh++) // output height
        {
            for (int ow = 0; ow < out_w; ow++) // output width
            {

                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
            }
        }
    }*/

    // N batch
    // Output channel
    // Input channel
    // Output height
    // Output width
    // Kernel height
    // Kernel width
}
#elif DIRECT_CBaseOpt
void forward_convolutional_layer(convolutional_layer l, network net)
{
    printf("I am going in convolutional layer first vec\n");
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    // int out_h = convolutional_out_height_direct(l);
    // int out_w = convolutional_out_width_direct(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
    if (l.xnor)
    {
        printf("going in xnor\n\n");
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }
    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;

    // changed the layout of input and weight from NCHW -> NHWC
    int index = 0;
    long gvl;
    __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
    int oh, ic;
    for (int i = 0; i < l.batch; ++i) // batch always 1
    {
        for (int j = 0; j < l.groups; ++j) // groups always 1
        {
            float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
            // float *a = l.weights  + j * l.nweights / l.groups;
            //  float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m; // output
            // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
            // Following Listing 2 order loops
            for (int oc = 0; oc < m;) // output channel
            {
                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                for (oh = 0; oh < out_h; oh++) // output height
                {
                    for (int ow = 0; ow < out_w; ow++) // output width
                    {
                        vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);        // load C in vc
                        for (int ic = 0; ic < l.c; ic++)                                              // input channe;
                        {
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;

                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                    vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                    if (l.pad == 0)
                                    {
                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                    }
                                    else
                                    {

                                        if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                        {
                                            vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                            ;
                                        }
                                        else
                                        {

                                            vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                            // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                        }
                                    }
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }
                        __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                    }
                }

                oc += gvl;
            }
        }
    }

    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    for (int oc = 0; oc < m; oc++) // output channel
    {
        for (int oh = 0; oh < out_h; oh++) // output height
        {
            for (int ow = 0; ow < out_w; ow++) // output width
            {

                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
            }
        }
    }
}
#elif DIRECT_Copt1unroll4
void forward_convolutional_layer(convolutional_layer l, network net)
{
        printf("I am going in convolutional layer first vec\n");
        fill_cpu(l.outputs * l.batch, 0, l.output, 1);
        int out_h = convolutional_out_height(l);
        int out_w = convolutional_out_width(l);
        // int out_h = convolutional_out_height_direct(l);
        // int out_w = convolutional_out_width_direct(l);
        printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
        if (l.xnor)
        {
                printf("going in xnor\n\n");
                binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
                swap_binary(&l);
                binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
                net.input = l.binary_input;
        }
        int m = l.n / l.groups;
        int k = l.size * l.size * l.c / l.groups;
        int n = l.out_w * l.out_h;

        // changed the layout of input and weight from NCHW -> NHWC
        int index = 0;
        long gvl;
        __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
        int oh, ic;
        for (int i = 0; i < l.batch; ++i) // batch always 1
        {
                for (int j = 0; j < l.groups; ++j) // groups always 1
                {
                        float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
                        // float *a = l.weights    + j * l.nweights / l.groups;
                        //    float *b = net.workspace;
                        float *c = l.output + (i * l.groups + j) * n * m; // output
                        // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
                        float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
                        // Following Listing 2 order loops
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                                for (oh = 0; oh < out_h-3; oh+=4) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);
                                                vc1 = __builtin_epi_vload_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], gvl);
                                                vc2 = __builtin_epi_vload_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], gvl);
                                                vc3 = __builtin_epi_vload_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;
                                                                int ih1 = (oh+1) * l.stride + kh - l.pad;
                                                                int ih2 = (oh+2) * l.stride + kh - l.pad;
                                                                int ih3 = (oh+3) * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        if (l.pad == 0)
                                                                        {
                                                                                //va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                                vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);


                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        
                                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih1 < 0) || (ih1 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih2 < 0) || (ih2 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih3 < 0) || (ih3 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], vc1, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], vc2, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], vc3, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int oh_left = oh;
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                        
                                for (int oh1 = oh_left; oh1 < out_h; oh1++) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh1 * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh1 * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh1 * out_w * m + ow * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                }
        }

        if (l.batch_normalize)
        {
                forward_batchnorm_layer(l, net);
        }
        else
        {
                add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
        }

        activate_array(l.output, l.outputs * l.batch, l.activation);
        if (l.binary || l.xnor)
                swap_binary(&l);

/*        for (int oc = 0; oc < m; oc++) // output channel
        {
                for (int oh = 0; oh < out_h; oh++) // output height
                {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {

                                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
                        }
                }
        }*/
}

#elif DIRECT_Coptunroll8
void forward_convolutional_layer(convolutional_layer l, network net)
{
        printf("I am going in convolutional layer first vec\n");
        fill_cpu(l.outputs * l.batch, 0, l.output, 1);
        int out_h = convolutional_out_height(l);
        int out_w = convolutional_out_width(l);
        // int out_h = convolutional_out_height_direct(l);
        // int out_w = convolutional_out_width_direct(l);
        printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
        if (l.xnor)
        {
                printf("going in xnor\n\n");
                binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
                swap_binary(&l);
                binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
                net.input = l.binary_input;
        }
        int m = l.n / l.groups;
        int k = l.size * l.size * l.c / l.groups;
        int n = l.out_w * l.out_h;

        // changed the layout of input and weight from NCHW -> NHWC
        int index = 0;
        long gvl;
        __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
        int oh, ic;
        for (int i = 0; i < l.batch; ++i) // batch always 1
        {
                for (int j = 0; j < l.groups; ++j) // groups always 1
                {
                        float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
                        // float *a = l.weights    + j * l.nweights / l.groups;
                        //    float *b = net.workspace;
                        float *c = l.output + (i * l.groups + j) * n * m; // output
                        // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
                        float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
                        // Following Listing 2 order loops
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                                for (oh = 0; oh < out_h-7; oh+=8) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);
                                                vc1 = __builtin_epi_vload_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], gvl);
                                                vc2 = __builtin_epi_vload_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], gvl);
                                                vc3 = __builtin_epi_vload_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                vc4 = __builtin_epi_vload_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], gvl);
                                                vc5 = __builtin_epi_vload_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], gvl);
                                                vc6 = __builtin_epi_vload_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], gvl);
                                                vc7 = __builtin_epi_vload_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], gvl);
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;
                                                                int ih1 = (oh+1) * l.stride + kh - l.pad;
                                                                int ih2 = (oh+2) * l.stride + kh - l.pad;
                                                                int ih3 = (oh+3) * l.stride + kh - l.pad;
                                                                int ih4 = (oh+4) * l.stride + kh - l.pad;
                                                                int ih5 = (oh+5) * l.stride + kh - l.pad;
                                                                int ih6 = (oh+6) * l.stride + kh - l.pad;
                                                                int ih7 = (oh+7) * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        if (l.pad == 0)
                                                                        {
                                                                                //va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                                vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);

                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        
                                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih1 < 0) || (ih1 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih2 < 0) || (ih2 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih3 < 0) || (ih3 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih4 < 0) || (ih4 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih5 < 0) || (ih5 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih6 < 0) || (ih6 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih7 < 0) || (ih7 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], vc1, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], vc2, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], vc3, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], vc4, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], vc5, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], vc6, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], vc7, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int oh_left = oh;
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                        
                                for (int oh1 = oh_left; oh1 < out_h; oh1++) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh1 * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh1 * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh1 * out_w * m + ow * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                }
        }

        if (l.batch_normalize)
        {
                forward_batchnorm_layer(l, net);
        }
        else
        {
                add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
        }

        activate_array(l.output, l.outputs * l.batch, l.activation);
        if (l.binary || l.xnor)
                swap_binary(&l);

        /*for (int oc = 0; oc < m; oc++) // output channel
        {
                for (int oh = 0; oh < out_h; oh++) // output height
                {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {

                                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
                        }
                }
        }*/
}
#elif DIRECT_Coptunroll16h
void forward_convolutional_layer(convolutional_layer l, network net)
{
        printf("I am going in convolutional layer first vec\n");
        fill_cpu(l.outputs * l.batch, 0, l.output, 1);
        int out_h = convolutional_out_height(l);
        int out_w = convolutional_out_width(l);
        // int out_h = convolutional_out_height_direct(l);
        // int out_w = convolutional_out_width_direct(l);
        printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
        if (l.xnor)
        {
                printf("going in xnor\n\n");
                binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
                swap_binary(&l);
                binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
                net.input = l.binary_input;
        }
        int m = l.n / l.groups;
        int k = l.size * l.size * l.c / l.groups;
        int n = l.out_w * l.out_h;

        // changed the layout of input and weight from NCHW -> NHWC
        int index = 0;
        long gvl;
        __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
        __epi_2xf32 vc8, vc9, vc10, vc11, vc12, vc13, vc14, vc15, vb8, vb9, vb10, vb11, vb12, vb13, vb14, vb15;
        int oh, ic;
        for (int i = 0; i < l.batch; ++i) // batch always 1
        {
                for (int j = 0; j < l.groups; ++j) // groups always 1
                {
                        float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
                        // float *a = l.weights    + j * l.nweights / l.groups;
                        //    float *b = net.workspace;
                        float *c = l.output + (i * l.groups + j) * n * m; // output
                        // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
                        float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
                        // Following Listing 2 order loops
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                                for (oh = 0; oh < out_h-15; oh+=16) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);
                                                vc1 = __builtin_epi_vload_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], gvl);
                                                vc2 = __builtin_epi_vload_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], gvl);
                                                vc3 = __builtin_epi_vload_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                vc4 = __builtin_epi_vload_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], gvl);
                                                vc5 = __builtin_epi_vload_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], gvl);
                                                vc6 = __builtin_epi_vload_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], gvl);
                                                vc7 = __builtin_epi_vload_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], gvl);
                                                vc8 = __builtin_epi_vload_2xf32(&c[(oh+8) * out_w * m + ow * m + oc], gvl);
                                                vc9 = __builtin_epi_vload_2xf32(&c[(oh+9) * out_w * m + ow * m + oc], gvl);
                                                vc10 = __builtin_epi_vload_2xf32(&c[(oh+10) * out_w * m + ow * m + oc], gvl);
                                                vc11 = __builtin_epi_vload_2xf32(&c[(oh+11) * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                vc12 = __builtin_epi_vload_2xf32(&c[(oh+12) * out_w * m + ow * m + oc], gvl);
                                                vc13 = __builtin_epi_vload_2xf32(&c[(oh+13) * out_w * m + ow * m + oc], gvl);
                                                vc14 = __builtin_epi_vload_2xf32(&c[(oh+14) * out_w * m + ow * m + oc], gvl);
                                                vc15 = __builtin_epi_vload_2xf32(&c[(oh+15) * out_w * m + ow * m + oc], gvl);
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;
                                                                int ih1 = (oh+1) * l.stride + kh - l.pad;
                                                                int ih2 = (oh+2) * l.stride + kh - l.pad;
                                                                int ih3 = (oh+3) * l.stride + kh - l.pad;
                                                                int ih4 = (oh+4) * l.stride + kh - l.pad;
                                                                int ih5 = (oh+5) * l.stride + kh - l.pad;
                                                                int ih6 = (oh+6) * l.stride + kh - l.pad;
                                                                int ih7 = (oh+7) * l.stride + kh - l.pad;
                                                                int ih8 = (oh+8) * l.stride + kh - l.pad;
                                                                int ih9 = (oh+9) * l.stride + kh - l.pad;
                                                                int ih10 = (oh+10) * l.stride + kh - l.pad;
                                                                int ih11 = (oh+11) * l.stride + kh - l.pad;
                                                                int ih12 = (oh+12) * l.stride + kh - l.pad;
                                                                int ih13 = (oh+13) * l.stride + kh - l.pad;
                                                                int ih14 = (oh+14) * l.stride + kh - l.pad;
                                                                int ih15 = (oh+15) * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        if (l.pad == 0)
                                                                        {
                                                                                //va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                                vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                  vb8 = __builtin_epi_vfmv_v_f_2xf32(b[ih8 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb9 = __builtin_epi_vfmv_v_f_2xf32(b[ih9 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb10 = __builtin_epi_vfmv_v_f_2xf32(b[ih10 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb11 = __builtin_epi_vfmv_v_f_2xf32(b[ih11 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb12 = __builtin_epi_vfmv_v_f_2xf32(b[ih12 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb13 = __builtin_epi_vfmv_v_f_2xf32(b[ih13 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb14 = __builtin_epi_vfmv_v_f_2xf32(b[ih14 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb15 = __builtin_epi_vfmv_v_f_2xf32(b[ih15 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                vc8 = __builtin_epi_vfmacc_2xf32(vc8, vb8, va, gvl);
                                                                                vc9 = __builtin_epi_vfmacc_2xf32(vc9, vb9, va, gvl);
                                                                                vc10 = __builtin_epi_vfmacc_2xf32(vc10, vb10, va, gvl);
                                                                                vc11 = __builtin_epi_vfmacc_2xf32(vc11, vb11, va, gvl);
                                                                                vc12 = __builtin_epi_vfmacc_2xf32(vc12, vb12, va, gvl);
                                                                                vc13 = __builtin_epi_vfmacc_2xf32(vc13, vb13, va, gvl);
                                                                                vc14 = __builtin_epi_vfmacc_2xf32(vc14, vb14, va, gvl);
                                                                                vc15 = __builtin_epi_vfmacc_2xf32(vc15, vb15, va, gvl);

                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        
                                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih1 < 0) || (ih1 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih2 < 0) || (ih2 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih3 < 0) || (ih3 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih4 < 0) || (ih4 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih5 < 0) || (ih5 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih6 < 0) || (ih6 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih7 < 0) || (ih7 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                
                                                                                if ((ih8 < 0) || (ih8 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc8 = __builtin_epi_vfadd_2xf32(vc8, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb8 = __builtin_epi_vfmv_v_f_2xf32(b[ih8 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc8 = __builtin_epi_vfmacc_2xf32(vc8, vb8, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih9 < 0) || (ih9 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc9 = __builtin_epi_vfadd_2xf32(vc9, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb9 = __builtin_epi_vfmv_v_f_2xf32(b[ih9 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc9 = __builtin_epi_vfmacc_2xf32(vc9, vb9, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih10 < 0) || (ih10 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc10 = __builtin_epi_vfadd_2xf32(vc10, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb10 = __builtin_epi_vfmv_v_f_2xf32(b[ih10 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc10 = __builtin_epi_vfmacc_2xf32(vc10, vb10, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih11 < 0) || (ih11 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc11 = __builtin_epi_vfadd_2xf32(vc11, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb11 = __builtin_epi_vfmv_v_f_2xf32(b[ih11 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc11 = __builtin_epi_vfmacc_2xf32(vc11, vb11, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih12 < 0) || (ih12 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc12 = __builtin_epi_vfadd_2xf32(vc12, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb12 = __builtin_epi_vfmv_v_f_2xf32(b[ih12 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc12 = __builtin_epi_vfmacc_2xf32(vc12, vb12, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih13 < 0) || (ih13 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc13 = __builtin_epi_vfadd_2xf32(vc13, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb13 = __builtin_epi_vfmv_v_f_2xf32(b[ih13 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc13 = __builtin_epi_vfmacc_2xf32(vc13, vb13, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih14 < 0) || (ih14 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc14 = __builtin_epi_vfadd_2xf32(vc14, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb14 = __builtin_epi_vfmv_v_f_2xf32(b[ih14 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc14 = __builtin_epi_vfmacc_2xf32(vc14, vb14, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih15 < 0) || (ih15 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc15 = __builtin_epi_vfadd_2xf32(vc15, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb15 = __builtin_epi_vfmv_v_f_2xf32(b[ih15 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc15 = __builtin_epi_vfmacc_2xf32(vc15, vb15, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], vc1, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], vc2, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], vc3, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], vc4, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], vc5, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], vc6, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], vc7, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+8) * out_w * m + ow * m + oc], vc8, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+9) * out_w * m + ow * m + oc], vc9, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+10) * out_w * m + ow * m + oc], vc10, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+11) * out_w * m + ow * m + oc], vc11, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+12) * out_w * m + ow * m + oc], vc12, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+13) * out_w * m + ow * m + oc], vc13, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+14) * out_w * m + ow * m + oc], vc14, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+15) * out_w * m + ow * m + oc], vc15, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int oh_left = oh;
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                        
                                for (int oh1 = oh_left; oh1 < out_h; oh1++) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh1 * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh1 * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh1 * out_w * m + ow * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                }
        }

        if (l.batch_normalize)
        {
                forward_batchnorm_layer(l, net);
        }
        else
        {
                add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
        }

        activate_array(l.output, l.outputs * l.batch, l.activation);
        if (l.binary || l.xnor)
                swap_binary(&l);

      /*  for (int oc = 0; oc < m; oc++) // output channel
        {
                for (int oh = 0; oh < out_h; oh++) // output height
                {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {

                                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
                        }
                }
        }*/
}

#elif DIRECT_C
void forward_convolutional_layer(convolutional_layer l, network net)
{
        printf("I am going in convolutional layer first vec vcetorizing ow\n");
        fill_cpu(l.outputs * l.batch, 0, l.output, 1);
        int out_h = convolutional_out_height(l);
        int out_w = convolutional_out_width(l);
        // int out_h = convolutional_out_height_direct(l);
        // int out_w = convolutional_out_width_direct(l);
        printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
        if (l.xnor)
        {
                printf("going in xnor\n\n");
                binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
                swap_binary(&l);
                binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
                net.input = l.binary_input;
        }
        int m = l.n / l.groups;
        int k = l.size * l.size * l.c / l.groups;
        int n = l.out_w * l.out_h;

        // changed the layout of input and weight from NCHW -> NHWC
        int index = 0;
        long gvl;
        __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
        __epi_2xf32 vc8, vc9, vc10, vc11, vc12, vc13, vc14, vc15, vb8, vb9, vb10, vb11, vb12, vb13, vb14, vb15;
        int oh, ic, ow;
        for (int i = 0; i < l.batch; ++i) // batch always 1
        {
                for (int j = 0; j < l.groups; ++j) // groups always 1
                {
                        float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
                        // float *a = l.weights    + j * l.nweights / l.groups;
                        //    float *b = net.workspace;
                        float *c = l.output + (i * l.groups + j) * n * m; // output
                        // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
                        float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
                        // Following Listing 2 order loops
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                                for (oh = 0; oh < out_h; oh+=1) // output height
                                {
                                        for (ow = 0; ow < out_w-15; ow+=16) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);
                                                vc1 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc2 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+2) * m + oc], gvl);
                                                vc3 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+3) * m + oc], gvl);                // load C in vc
                                                vc4 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+4) * m + oc], gvl);
                                                vc5 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+5) * m + oc], gvl);
                                                vc6 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+6) * m + oc], gvl);
                                                vc7 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+7) * m + oc], gvl);
                                                vc8 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+8) * m + oc], gvl);
                                                vc9 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+9) * m + oc], gvl);
                                                vc10 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+10) * m + oc], gvl);
                                                vc11 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+11) * m + oc], gvl);                // load C in vc
                                                vc12 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+12) * m + oc], gvl);
                                                vc13 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+13) * m + oc], gvl);
                                                vc14 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+14) * m + oc], gvl);
                                                vc15 = __builtin_epi_vload_2xf32(&c[(oh) * out_w * m + (ow+15) * m + oc], gvl);
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;
                                                               

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        int iw1 = (ow+1) * l.stride + kw - l.pad;
                                                                        int iw2 = (ow+2) * l.stride + kw - l.pad;
                                                                        int iw3 = (ow+3) * l.stride + kw - l.pad;
                                                                        int iw4 = (ow+4) * l.stride + kw - l.pad;
                                                                        int iw5 = (ow+5) * l.stride + kw - l.pad;
                                                                        int iw6 = (ow+6) * l.stride + kw - l.pad;
                                                                        int iw7 = (ow+7) * l.stride + kw - l.pad;
                                                                        int iw8 = (ow+8) * l.stride + kw - l.pad;
                                                                        int iw9 = (ow+9) * l.stride + kw - l.pad;
                                                                        int iw10 = (ow+10) * l.stride + kw - l.pad;
                                                                        int iw11 = (ow+11) * l.stride + kw - l.pad;
                                                                        int iw12 = (ow+12) * l.stride + kw - l.pad;
                                                                        int iw13 = (ow+13) * l.stride + kw - l.pad;
                                                                        int iw14 = (ow+14) * l.stride + kw - l.pad;
                                                                        int iw15 = (ow+15) * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        if (l.pad == 0)
                                                                        {
                                                                                //va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                                vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw2 * l.c + ic], gvl);
                                                                                vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw3 * l.c + ic], gvl);
                                                                                vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw4 * l.c + ic], gvl);
                                                                                vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw5 * l.c + ic], gvl);
                                                                                vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw6 * l.c + ic], gvl);
                                                                                vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw7 * l.c + ic], gvl);
                                                                                  vb8 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw8 * l.c + ic], gvl);
                                                                                vb9 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw9 * l.c + ic], gvl);
                                                                                vb10 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw10 * l.c + ic], gvl);
                                                                                vb11 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw11 * l.c + ic], gvl);
                                                                                vb12 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw12 * l.c + ic], gvl);
                                                                                vb13 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw13 * l.c + ic], gvl);
                                                                                vb14 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw14 * l.c + ic], gvl);
                                                                                vb15 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw15 * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                vc8 = __builtin_epi_vfmacc_2xf32(vc8, vb8, va, gvl);
                                                                                vc9 = __builtin_epi_vfmacc_2xf32(vc9, vb9, va, gvl);
                                                                                vc10 = __builtin_epi_vfmacc_2xf32(vc10, vb10, va, gvl);
                                                                                vc11 = __builtin_epi_vfmacc_2xf32(vc11, vb11, va, gvl);
                                                                                vc12 = __builtin_epi_vfmacc_2xf32(vc12, vb12, va, gvl);
                                                                                vc13 = __builtin_epi_vfmacc_2xf32(vc13, vb13, va, gvl);
                                                                                vc14 = __builtin_epi_vfmacc_2xf32(vc14, vb14, va, gvl);
                                                                                vc15 = __builtin_epi_vfmacc_2xf32(vc15, vb15, va, gvl);

                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                       
                                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw2 < 0) || (iw2 >= l.w))
                                                                                {
                                                                                        vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw2 * l.c + ic], gvl);
                                                                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw3 < 0) || (iw3 >= l.w))
                                                                                {
                                                                                        vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw3 * l.c + ic], gvl);
                                                                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw4 < 0) || (iw4 >= l.w))
                                                                                {
                                                                                        vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw4 * l.c + ic], gvl);
                                                                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw5 < 0) || (iw5 >= l.w))
                                                                                {
                                                                                        vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw5 * l.c + ic], gvl);
                                                                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw6 < 0) || (iw6 >= l.w))
                                                                                {
                                                                                        vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw6 * l.c + ic], gvl);
                                                                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw7 < 0) || (iw7 >= l.w))
                                                                                {
                                                                                        vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw7 * l.c + ic], gvl);
                                                                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                               
                                                                                if ((ih < 0) || (ih >= l.h) || (iw8 < 0) || (iw8 >= l.w))
                                                                                {
                                                                                        vc8 = __builtin_epi_vfadd_2xf32(vc8, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb8 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw8 * l.c + ic], gvl);
                                                                                        vc8 = __builtin_epi_vfmacc_2xf32(vc8, vb8, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw9 < 0) || (iw9 >= l.w))
                                                                                {
                                                                                        vc9 = __builtin_epi_vfadd_2xf32(vc9, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb9 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw9 * l.c + ic], gvl);
                                                                                        vc9 = __builtin_epi_vfmacc_2xf32(vc9, vb9, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw10 < 0) || (iw10 >= l.w))
                                                                                {
                                                                                        vc10 = __builtin_epi_vfadd_2xf32(vc10, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb10 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw10 * l.c + ic], gvl);
                                                                                        vc10 = __builtin_epi_vfmacc_2xf32(vc10, vb10, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw11 < 0) || (iw11 >= l.w))
                                                                                {
                                                                                        vc11 = __builtin_epi_vfadd_2xf32(vc11, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb11 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw11 * l.c + ic], gvl);
                                                                                        vc11 = __builtin_epi_vfmacc_2xf32(vc11, vb11, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw12 < 0) || (iw12 >= l.w))
                                                                                {
                                                                                        vc12 = __builtin_epi_vfadd_2xf32(vc12, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb12 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw12 * l.c + ic], gvl);
                                                                                        vc12 = __builtin_epi_vfmacc_2xf32(vc12, vb12, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw13 < 0) || (iw13 >= l.w))
                                                                                {
                                                                                        vc13 = __builtin_epi_vfadd_2xf32(vc13, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb13 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw13 * l.c + ic], gvl);
                                                                                        vc13 = __builtin_epi_vfmacc_2xf32(vc13, vb13, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw14 < 0) || (iw14 >= l.w))
                                                                                {
                                                                                        vc14 = __builtin_epi_vfadd_2xf32(vc14, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb14 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw14 * l.c + ic], gvl);
                                                                                        vc14 = __builtin_epi_vfmacc_2xf32(vc14, vb14, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw15 < 0) || (iw15 >= l.w))
                                                                                {
                                                                                        vc15 = __builtin_epi_vfadd_2xf32(vc15, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb15 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw15 * l.c + ic], gvl);
                                                                                        vc15 = __builtin_epi_vfmacc_2xf32(vc15, vb15, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+1) * m + oc], vc1, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+2) * m + oc], vc2, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+3) * m + oc], vc3, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+4) * m + oc], vc4, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+5) * m + oc], vc5, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+6) * m + oc], vc6, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+7) * m + oc], vc7, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+8) * m + oc], vc8, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+9) * m + oc], vc9, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+10) * m + oc], vc10, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+11) * m + oc], vc11, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+12) * m + oc], vc12, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+13) * m + oc], vc13, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+14) * m + oc], vc14, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh) * out_w * m + (ow+15) * m + oc], vc15, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int ow_left = ow;
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                       
                                for (int oh1 = 0; oh1 < out_h; oh1++) // output height
                                {
                                        for (int ow1 = ow_left; ow1 < out_w; ow1++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh1 * out_w * m + ow1 * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh1 * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow1 * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh1 * out_w * m + ow1 * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                }
        }

        if (l.batch_normalize)
        {
                forward_batchnorm_layer(l, net);
        }
        else
        {
                add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
        }

        activate_array(l.output, l.outputs * l.batch, l.activation);
        if (l.binary || l.xnor)
                swap_binary(&l);

/*        for (int oc = 0; oc < m; oc++) // output channel
        {
                for (int oh = 0; oh < out_h; oh++) // output height
                {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {

                                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
                        }
                }
        }*/
}



#elif DIRECT_Coptunroll16hw
void forward_convolutional_layer(convolutional_layer l, network net)
{
        fill_cpu(l.outputs * l.batch, 0, l.output, 1);
        int out_h = convolutional_out_height(l);
        int out_w = convolutional_out_width(l);
        // int out_h = convolutional_out_height_direct(l);
        // int out_w = convolutional_out_width_direct(l);
        printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
        if (l.xnor)
        {
                printf("going in xnor\n\n");
                binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
                swap_binary(&l);
                binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
                net.input = l.binary_input;
        }
        int m = l.n / l.groups;
        int k = l.size * l.size * l.c / l.groups;
        int n = l.out_w * l.out_h;

        // changed the layout of input and weight from NCHW -> NHWC
        int index = 0;
        long gvl;
        __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va;
        __epi_2xf32 vc00, vc01, vc02, vc03, vc04, vc05, vc06, vc07, vb00, vb01, vb02, vb03, vb04, vb05, vb06, vb07;
        int oh, ic, ow;
        for (int i = 0; i < l.batch; ++i) // batch always 1
        {
                for (int j = 0; j < l.groups; ++j) // groups always 1
                {
                        float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
                        // float *a = l.weights    + j * l.nweights / l.groups;
                        //    float *b = net.workspace;
                        float *c = l.output + (i * l.groups + j) * n * m; // output
                        // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
                        float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
                        // Following Listing 2 order loops
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                                for (oh = 0; oh < out_h-7; oh+=8) // output height
                                {
                                        for ( ow = 0; ow < out_w-1; ow+=2) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);
                                                vc00 = __builtin_epi_vload_2xf32(&c[oh * out_w * m + (ow+1) * m + oc], gvl);
                                                vc1 = __builtin_epi_vload_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], gvl);
                                                vc01 = __builtin_epi_vload_2xf32(&c[(oh+1) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc2 = __builtin_epi_vload_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], gvl);
                                                vc02 = __builtin_epi_vload_2xf32(&c[(oh+2) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc3 = __builtin_epi_vload_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], gvl);
                                                vc03 = __builtin_epi_vload_2xf32(&c[(oh+3) * out_w * m + (ow+1) * m + oc], gvl);                // load C in vc
                                                vc4 = __builtin_epi_vload_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], gvl);
                                                vc04 = __builtin_epi_vload_2xf32(&c[(oh+4) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc5 = __builtin_epi_vload_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], gvl);
                                                vc05 = __builtin_epi_vload_2xf32(&c[(oh+5) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc6 = __builtin_epi_vload_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], gvl);
                                                vc06 = __builtin_epi_vload_2xf32(&c[(oh+6) * out_w * m + (ow+1) * m + oc], gvl);
                                                vc7 = __builtin_epi_vload_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], gvl);
                                                vc07 = __builtin_epi_vload_2xf32(&c[(oh+7) * out_w * m + (ow+1) * m + oc], gvl);
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;
                                                                int ih1 = (oh+1) * l.stride + kh - l.pad;
                                                                int ih2 = (oh+2) * l.stride + kh - l.pad;
                                                                int ih3 = (oh+3) * l.stride + kh - l.pad;
                                                                int ih4 = (oh+4) * l.stride + kh - l.pad;
                                                                int ih5 = (oh+5) * l.stride + kh - l.pad;
                                                                int ih6 = (oh+6) * l.stride + kh - l.pad;
                                                                int ih7 = (oh+7) * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        int iw1 = (ow+1) * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        if (l.pad == 0)
                                                                        {
                                                                                //va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                                vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vb00 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb01 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb02 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb03 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb04 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb05 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb06 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vb07 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                vc00 = __builtin_epi_vfmacc_2xf32(vc00, vb00, va, gvl);
                                                                                vc01 = __builtin_epi_vfmacc_2xf32(vc01, vb01, va, gvl);
                                                                                vc02 = __builtin_epi_vfmacc_2xf32(vc02, vb02, va, gvl);
                                                                                vc03 = __builtin_epi_vfmacc_2xf32(vc03, vb03, va, gvl);
                                                                                vc04 = __builtin_epi_vfmacc_2xf32(vc04, vb04, va, gvl);
                                                                                vc05 = __builtin_epi_vfmacc_2xf32(vc05, vb05, va, gvl);
                                                                                vc06 = __builtin_epi_vfmacc_2xf32(vc06, vb06, va, gvl);
                                                                                vc07 = __builtin_epi_vfmacc_2xf32(vc07, vb07, va, gvl);

                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                       
                                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih1 < 0) || (ih1 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih2 < 0) || (ih2 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih3 < 0) || (ih3 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih4 < 0) || (ih4 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih5 < 0) || (ih5 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih6 < 0) || (ih6 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih7 < 0) || (ih7 >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);
                                                                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih < 0) || (ih >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc00 = __builtin_epi_vfadd_2xf32(vc00, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                       
                                                                                        vb01 = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc01 = __builtin_epi_vfmacc_2xf32(vc01, vb01, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih1 < 0) || (ih1 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc01 = __builtin_epi_vfadd_2xf32(vc01, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb01 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc01 = __builtin_epi_vfmacc_2xf32(vc01, vb01, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih2 < 0) || (ih2 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc02 = __builtin_epi_vfadd_2xf32(vc02, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb02 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc02 = __builtin_epi_vfmacc_2xf32(vc02, vb02, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih3 < 0) || (ih3 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc03 = __builtin_epi_vfadd_2xf32(vc03, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb03 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc03 = __builtin_epi_vfmacc_2xf32(vc03, vb03, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih4 < 0) || (ih4 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc04 = __builtin_epi_vfadd_2xf32(vc04, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb04 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc04 = __builtin_epi_vfmacc_2xf32(vc04, vb04, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih5 < 0) || (ih5 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc05 = __builtin_epi_vfadd_2xf32(vc05, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb05 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc05 = __builtin_epi_vfmacc_2xf32(vc05, vb05, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih6 < 0) || (ih6 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc06 = __builtin_epi_vfadd_2xf32(vc06, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb06 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc06 = __builtin_epi_vfmacc_2xf32(vc06, vb06, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                                if ((ih7 < 0) || (ih7 >= l.h) || (iw1 < 0) || (iw1 >= l.w))
                                                                                {
                                                                                        vc07 = __builtin_epi_vfadd_2xf32(vc07, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                                        vb07 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw1 * l.c + ic], gvl);
                                                                                        vc07 = __builtin_epi_vfmacc_2xf32(vc07, vb07, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+1) * out_w * m + ow * m + oc], vc1, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+2) * out_w * m + ow * m + oc], vc2, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+3) * out_w * m + ow * m + oc], vc3, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+4) * out_w * m + ow * m + oc], vc4, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+5) * out_w * m + ow * m + oc], vc5, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+6) * out_w * m + ow * m + oc], vc6, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+7) * out_w * m + ow * m + oc], vc7, gvl);
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + (ow+1) * m + oc], vc00, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+1) * out_w * m + (ow+1) * m + oc], vc01, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+2) * out_w * m + (ow+1) * m + oc], vc02, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+3) * out_w * m + (ow+1) * m + oc], vc03, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+4) * out_w * m + (ow+1) * m + oc], vc04, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+5) * out_w * m + (ow+1) * m + oc], vc05, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+6) * out_w * m + (ow+1) * m + oc], vc06, gvl);
                                                __builtin_epi_vstore_2xf32(&c[(oh+7) * out_w * m + (ow+1) * m + oc], vc07, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int oh_left = oh;
                        for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                       
                                for (int oh1 = oh_left; oh1 < out_h; oh1++) // output height
                                {
                                        for (int ow = 0; ow < out_w; ow++) // output width
                                        {
                                                vc = __builtin_epi_vload_2xf32(&c[oh1 * out_w * m + ow * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh1 * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh1 * out_w * m + ow * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                        int ow_left = ow;
       	                for (int oc = 0; oc < m;) // output channel
                        {
                                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);
                       
                                        for (int ow1 = ow_left; ow1 < out_w; ow1++) // output width
                                        {
                                for (int oh = 0; oh < out_h; oh++) // output height
                                {
                                                vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow1 * m + oc], gvl);                // load C in vc
                                                for (int ic = 0; ic < l.c; ic++)                                                                                            // input channe;
                                                {
                                                        for (int kh = 0; kh < l.size; kh++) // kernel height
                                                        {
                                                                int ih = oh * l.stride + kh - l.pad;

                                                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                                                {
                                                                        int iw = ow1 * l.stride + kw - l.pad;
                                                                        va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);

                                                                        if (l.pad == 0)
                                                                        {
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                                                                vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                        }
                                                                        else
                                                                        {

                                                                                if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                                                                {
                                                                                        vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                                                                        ;
                                                                                }
                                                                                else
                                                                                {
                                                                        vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                                                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                                                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                                                                }
                                                                        }
                                                                        // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                                                }
                                                        }
                                                }
                                                __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow1 * m + oc], vc, gvl);
                                        }
                                }

                                oc += gvl;
                        }
                }
        }

        if (l.batch_normalize)
        {
                forward_batchnorm_layer(l, net);
        }
        else
        {
                add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
        }

        activate_array(l.output, l.outputs * l.batch, l.activation);
        if (l.binary || l.xnor)
                swap_binary(&l);

       /* for (int oc = 0; oc < m; oc++) // output channel
        {
                for (int oh = 0; oh < out_h; oh++) // output height
                {
                        for (int ow = 0; ow < out_w; ow++) // output width
                        {

                                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
                        }
                }
        }*/
}


#elif DIRECT_COpt2
void forward_convolutional_layer(convolutional_layer l, network net)
{
    printf("I am going in convolutional layer first vec\n");
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    // int out_h = convolutional_out_height_direct(l);
    // int out_w = convolutional_out_width_direct(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d pad = %d\n", out_h, out_w, l.size, l.size, l.pad);
    if (l.xnor)
    {
        printf("going in xnor\n\n");
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }
    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;

    // changed the layout of input and weight from NCHW -> NHWC
    int index = 0;
    long gvl;
    __epi_2xf32 vc, vc1, vc2, vc3, vc4, vc5, vc6, vc7, vb, vb1, vb2, vb3, vb4, vb5, vb6, vb7, va, va1, va2, va3, va4, va5, va6, va7;
    int oh, ic;
    for (int i = 0; i < l.batch; ++i) // batch always 1
    {
        for (int j = 0; j < l.groups; ++j) // groups always 1
        {
            float *a = l.weights_hwcm + j * l.nweights / l.groups; // weight matrix
            // float *a = l.weights  + j * l.nweights / l.groups;
            //  float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m; // output
            // float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            float *b = net.input + l.h * l.w * (i * l.groups + j) * l.c / l.groups; // input matrix
            // Following Listing 2 order loops
            for (int oc = 0; oc < m;) // output channel
            {
                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                for (oh = 0; oh < out_h; oh += 8) // output height
                {
                    for (int ow = 0; ow < out_w; ow++) // output width
                    {
                        vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl);        // load C in vc
                        vc1 = __builtin_epi_vload_2xf32(&c[(oh + 1) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc2 = __builtin_epi_vload_2xf32(&c[(oh + 2) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc3 = __builtin_epi_vload_2xf32(&c[(oh + 3) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc4 = __builtin_epi_vload_2xf32(&c[(oh + 4) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc5 = __builtin_epi_vload_2xf32(&c[(oh + 5) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc6 = __builtin_epi_vload_2xf32(&c[(oh + 6) * out_w * m + ow * m + oc], gvl); // load C in vc
                        vc7 = __builtin_epi_vload_2xf32(&c[(oh + 7) * out_w * m + ow * m + oc], gvl); // load C in vc
			if(l.c > 8){
                        for (int ic = 0; ic < l.c; ic += 8)                                           // input channe;
                        {
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;
                                int ih1 = (oh + 1) * l.stride + kh - l.pad;
                                int ih2 = (oh + 2) * l.stride + kh - l.pad;
                                int ih3 = (oh + 3) * l.stride + kh - l.pad;
                                int ih4 = (oh + 4) * l.stride + kh - l.pad;
                                int ih5 = (oh + 5) * l.stride + kh - l.pad;
                                int ih6 = (oh + 6) * l.stride + kh - l.pad;
                                int ih7 = (oh + 7) * l.stride + kh - l.pad;
                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                    va1 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 1) * m + oc], gvl);
                                    va2 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 2) * m + oc], gvl);
                                    va3 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 3) * m + oc], gvl);
                                    va4 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 4) * m + oc], gvl);
                                    va5 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 5) * m + oc], gvl);
                                    va6 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 6) * m + oc], gvl);
                                    va7 = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + (ic + 7) * m + oc], gvl);

                                    vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                    vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);

                                    if (l.pad == 0)
                                    {
                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);
                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                    }
                                    else
                                    {

                                        if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                        {
                                            vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                            ;
                                        }
                                        else
                                        {

                                            vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc = __builtin_epi_vfmacc_2xf32(vc, __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);

                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 1)], gvl), va1, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 2)], gvl), va2, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 3)], gvl), va3, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 4)], gvl), va4, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 5)], gvl), va5, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 6)], gvl), va6, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + (ic + 7)], gvl), va7, gvl);
                                            // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                        }
                                    }
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }}
                        int ic_left = ic;
                        for (ic = ic_left; ic < l.c; ic++) // input channe;
                        {
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;
                                int ih1 = (oh + 1) * l.stride + kh - l.pad;
                                int ih2 = (oh + 2) * l.stride + kh - l.pad;
                                int ih3 = (oh + 3) * l.stride + kh - l.pad;
                                int ih4 = (oh + 4) * l.stride + kh - l.pad;
                                int ih5 = (oh + 5) * l.stride + kh - l.pad;
                                int ih6 = (oh + 6) * l.stride + kh - l.pad;
                                int ih7 = (oh + 7) * l.stride + kh - l.pad;
                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                    vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);
                                    vb1 = __builtin_epi_vfmv_v_f_2xf32(b[ih1 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb2 = __builtin_epi_vfmv_v_f_2xf32(b[ih2 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb3 = __builtin_epi_vfmv_v_f_2xf32(b[ih3 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb4 = __builtin_epi_vfmv_v_f_2xf32(b[ih4 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb5 = __builtin_epi_vfmv_v_f_2xf32(b[ih5 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb6 = __builtin_epi_vfmv_v_f_2xf32(b[ih6 * out_w * l.c + iw * l.c + ic], gvl);
                                    vb7 = __builtin_epi_vfmv_v_f_2xf32(b[ih7 * out_w * l.c + iw * l.c + ic], gvl);

                                    if (l.pad == 0)
                                    {

                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                        vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                        vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                        vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                        vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                        vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                        vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                        vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);

                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                    }
                                    else
                                    {

                                        if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                        {
                                            vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc1 = __builtin_epi_vfadd_2xf32(vc1, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc2 = __builtin_epi_vfadd_2xf32(vc2, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc3 = __builtin_epi_vfadd_2xf32(vc3, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc4 = __builtin_epi_vfadd_2xf32(vc4, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc5 = __builtin_epi_vfadd_2xf32(vc5, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc6 = __builtin_epi_vfadd_2xf32(vc6, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            vc7 = __builtin_epi_vfadd_2xf32(vc7, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);
                                            // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                            ;
                                        }
                                        else
                                        {

                                            vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);
                                            vc1 = __builtin_epi_vfmacc_2xf32(vc1, vb1, va, gvl);
                                            vc2 = __builtin_epi_vfmacc_2xf32(vc2, vb2, va, gvl);
                                            vc3 = __builtin_epi_vfmacc_2xf32(vc3, vb3, va, gvl);
                                            vc4 = __builtin_epi_vfmacc_2xf32(vc4, vb4, va, gvl);
                                            vc5 = __builtin_epi_vfmacc_2xf32(vc5, vb5, va, gvl);
                                            vc6 = __builtin_epi_vfmacc_2xf32(vc6, vb6, va, gvl);
                                            vc7 = __builtin_epi_vfmacc_2xf32(vc7, vb7, va, gvl);

                                            // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                        }
                                    }
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }
                        __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 1) * out_w * m + ow * m + oc], vc1, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 2) * out_w * m + ow * m + oc], vc2, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 3) * out_w * m + ow * m + oc], vc3, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 4) * out_w * m + ow * m + oc], vc4, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 5) * out_w * m + ow * m + oc], vc5, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 6) * out_w * m + ow * m + oc], vc6, gvl);
                        __builtin_epi_vstore_2xf32(&c[(oh + 7) * out_w * m + ow * m + oc], vc7, gvl);
                    }
                }

                oc += gvl;
            }
            int oh_left = oh;
            for (int oc = 0; oc < m;) // output channel
            {
                gvl = __builtin_epi_vsetvl(m - oc, __epi_e32, __epi_m1);

                for (int oh = oh_left; oh < out_h; oh++) // output height
                {
                    for (int ow = 0; ow < out_w; ow++) // output width
                    {
                        vc = __builtin_epi_vload_2xf32(&c[oh * out_w * m + ow * m + oc], gvl); // load C in vc
                        for (int ic = 0; ic < l.c; ic++)                                       // input channe;
                        {
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;

                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    va = __builtin_epi_vload_2xf32(&a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc], gvl);
                                    vb = __builtin_epi_vfmv_v_f_2xf32(b[ih * out_w * l.c + iw * l.c + ic], gvl);

                                    if (l.pad == 0)
                                    {

                                        vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);

                                        // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                    }
                                    else
                                    {

                                        if ((ih < 0) || (ih >= l.h) || (iw < 0) || (iw >= l.w))
                                        {
                                            vc = __builtin_epi_vfadd_2xf32(vc, (__builtin_epi_vfmv_v_f_2xf32(0.0, gvl)), gvl);

                                            // c[oh * out_w * m + ow * m + oc] = c[oh * out_w * m + ow * m + oc] + 0.0;
                                            ;
                                        }
                                        else
                                        {

                                            vc = __builtin_epi_vfmacc_2xf32(vc, vb, va, gvl);

                                            // c[oh * out_w * m + ow * m + oc] += b[ih * out_w * l.c + iw * l.c + ic] * a[kh * l.size * l.c * m + kw * l.c * m + ic * m + oc];
                                        }
                                    }
                                    // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                        }
                        __builtin_epi_vstore_2xf32(&c[oh * out_w * m + ow * m + oc], vc, gvl);
                    }
                }
                oc += gvl;
            }
        }
    }
    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias_direct(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    for (int oc = 0; oc < m; oc++) // output channel
    {
        for (int oh = 0; oh < out_h; oh++) // output height
        {
           for (int ow = 0; ow < out_w; ow++) // output width
            {

                printf("oc = %d oh = %d ow = %d %f\n", oc, oh, ow, l.output[oh * out_w * m + ow * m + oc]);
            }
        }
    }
}
#elif DIRECT_ONEDNN
void forward_convolutional_layer(convolutional_layer l, network net)
{
    printf("I am in partial optimized direct \n");
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d\n", out_h, out_w, l.size, l.size);
    if (l.xnor)
    {
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }

    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;
    for (int i = 0; i < l.batch; ++i)
    {
        for (int j = 0; j < l.groups; ++j)
        {
            float *a = l.weights + j * l.nweights / l.groups;
            // float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m;
            float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;

            for (int ocb = 0; ocb < cfg.oc / cfg.ocb; ++ocb)         // Activation tensor (dst) blocking factor over the OC dim cfg.ocb
                for (int ic = 0; ic < cfg.ic; ic += cfg.k_c)         // Loop size over the non-vectorized channel dim k_c
                    for (int kh = 0; kh < cfg.kh; kh += cfg.k_h)     // Loop size over the H dim walking the vector source tensor k_h
                        for (int kw = 0; kw < cfg.kw; kw += cfg.k_w) // Loop size over the W dim walking the vector source tensor k_w
                            for (int oh = 0; oh < cfg.oh; ++oh)      //
                                for (int ow = 0; ow < cfg.ow; ow += cfg.rbw)
                                { // Unroll factor for the output tensor width loop

                                    int ih = oh * cfg.stride_h - cfg.t_pad + kh;
                                    int iw = ow * cfg.stride_w - cfg.l_pad + kw;
                                    int const icb = ic / cfg.icb;
                                    int const icbl = ic % cfg.icb;
                                    int const w_icb = ic / cfg.w_icb;
                                    int const w_icbl = ic % cfg.w_icb;

                                    a.vlen = nstl::min(cfg.vlen, cfg.oc - ocb * cfg.ocb);
                                    a.h_loop_size = cfg.k_h - (t_pad_overlap + b_pad_overlap);
                                    a.w_loop_size = cfg.k_w;
                                    a.dst = ((ocb * cfg.oh + oh) * cfg.ow + ow) * cfg.ocb;          // index cal
                                    a.src = (((icb * cfg.ih + ih) * cfg.iw + iw) * cfg.icb) + icbl; // index cal
                                    a.wei = ocb * cfg.ic * cfg.kh * cfg.kw * cfg.w_ocb              // index cal
                                            + ((((w_icb * cfg.kh + kh) * cfg.kw + kw) * cfg.w_icb + w_icbl) * cfg.w_ocb);
                                    for (icb = 0; icb < min(icb, k_c) / icb; ++icb)
                                    {
                                        for (wic = 0; wic < min(icb, k_c) / w_icb; ++wic)
                                        { // only pointwise
                                            for (kh = padTop; kh < k_h - padBot; ++kh)
                                            {
                                                for (kw = 0; kh < k_w; ++kw)
                                                {
                                                    for (ic = 0; ic < w_icb; ++ic)
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (a.h_loop_size * a.w_loop_size > 0)
                                        schedule_iteration(factory, t, a); // another kernel for scheduling the kernels
                                                                           //  for (icb = 0; icb < min(icb, k_c) / icb; ++icb)
                                    //  for (wic = 0; wic < min(icb, k_c) / w_icb; ++wic) // only pointwise
                                    //   for (kh = padTop; kh < k_h - padBot; ++kh)
                                    //    for (kw = 0; kh < k_w; ++kw)
                                    //     for (ic = 0; ic < w_icb; ++ic)
                                }
        }
    }
    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    for (int i = 0; i < 10; i++)
    {
        printf("%f", l.output[i]);
    }
}

#elif DIRECT_CReorder
void forward_convolutional_layer(convolutional_layer l, network net)
{
    printf("I am in partial optimized direct \n");
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d\n", out_h, out_w, l.size, l.size);
    if (l.xnor)
    {
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }

    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;
    int vl = 2;
    for (int i = 0; i < l.batch; ++i)
    {
        for (int j = 0; j < l.groups; ++j)
        {
            float *a = l.weights + j * l.nweights / l.groups;
            // float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m;
            float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;

            for (int oh = 0; oh < out_h; oh++) // output height
            {
                for (int ow = 0; ow < out_w; ow++) // output width
                {
                    for (int kh = 0; kh < l.size; kh++) // kernel height
                    {
                        int ih = oh * l.stride + kh - l.pad;
                        for (int kw = 0; kw < l.size; kw++) // kernel width
                        {
                            int iw = ow * l.stride + kw - l.pad;
                            for (int ic = 0; ic < l.c; ic++) // output channel
                            {
                                for (int oc = 0; oc < m; oc += 1) // input channe;
                                {
                                    // for(int oci=0;oci<vl;oci++) //loop over vl
                                    //{
                                    // c[ oh*out_w*m + ow*m + oc] += b[ ih*out_w*l.c + iw*l.c + ic] * a[ kh*l.size*l.c*m + kw*l.c*m + ic*m + oc];
                                    // c[ oh*out_w*m + ow*m + oc] += b[ ih*out_w*l.c + iw*l.c + ic] * a[oc*l.c*l.size*l.size + ic*l.size*l.size+ kh*l.size + kw ];
                                    c[oc * out_w * out_h + oh * out_w + ow] += b[ic * out_h * out_w + ih * out_w + iw] * a[oc * l.c * l.size * l.size + ic * l.size * l.size + kh * l.size + kw];
                                    //}
                                }
                                // c[oh][ow][oc] += b[j][ih][iw][ic] * a[kh][kw][ic][oc];
                                // c[oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                            }
                        }
                    }
                }
            }
        }
    }
    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    for (int i = 0; i < 10; i++)
    {
        printf("%f", l.output[i]);
    }
    // N batch
    // Output channel
    // Input channel
    // Output height
    // Output width
    // Kernel height
    // Kernel width
}
#elif DIRECT_Opt
void forward_convolutional_layer(convolutional_layer l, network net)
{
    fill_cpu(l.outputs * l.batch, 0, l.output, 1);
    int out_h = convolutional_out_height(l);
    int out_w = convolutional_out_width(l);
    printf("output width = %d, output height = %d, kenrel width = %d, kernel height = %d\n", out_h, out_w, l.size, l.size);
    if (l.xnor)
    {
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }
    int h, w, ici;
    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;
    int nvlen = __builtin_epi_vsetvlmax(__epi_e32, __epi_m1);
    __epi_2xf32 v0, v1, v2;
    int ocb = (m < nvlen) ? m : nvlen; // min(m, nvlen);
    int icb = 1;                       // 𝑚𝑖𝑛(l.c, nvlen)
    int rbw = 1;                       // 𝑚𝑖𝑛(nvreg - 1,out_w)
    int rbh = 1;                       // 𝑚𝑎𝑥 ( (nvreg - (1 + rbw))/out_h, 1)
    int vl = (m < nvlen) ? m : nvlen;  // min(m, nvlen);
    for (int i = 0; i < l.batch; ++i)
    {
        for (int j = 0; j < l.groups; ++j)
        {
            float *a = l.weights + j * l.nweights / l.groups;
            float *c = l.output + (i * l.groups + j) * n * m;
            float *b = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            for (int oc = 0; oc < m; oc += vl) // output channel / ocb will be accoding to VL
            {
                for (int ic = 0; ic < l.c / icb; ic++) // input channel /icb where icb set acc to VL
                {
                    for (int oh = 0; oh < out_h / rbh; oh++) // output height as per reg
                    {
                        for (int ow = 0; ow < out_w / rbw; ow++) // output width as per reg
                        {
                            for (h = 0; h < rbh; h++) // as per vector registers
                            {
                                for (w = 0; w < rbw; w++) // as per vector registers
                                {
                                    v0 = __builtin_epi_vload_2xf32(&c[oc * out_w * out_h + (oh + h) * out_w + (ow + w)], vl); // vload how?
                                }
                            }
                            for (int kh = 0; kh < l.size; kh++) // kernel height
                            {
                                int ih = oh * l.stride + kh - l.pad;
                                for (int kw = 0; kw < l.size; kw++) // kernel width
                                {
                                    int iw = ow * l.stride + kw - l.pad;
                                    for (ici = 0; ici < icb; ici++)
                                    {
                                        // v1[] = a[oc*l.c*l.size*l.size + ic*l.size*l.size+ kh*l.size + kw+ici];
                                        v1 = __builtin_epi_vload_2xf32(&a[oc * l.c * l.size * l.size + ic * l.size * l.size + kh * l.size + kw], vl);
                                        for (h = 0; h < rbh; h++)
                                        {
                                            for (w = 0; w < rbw; w++)
                                            {
                                                // v2[] = b[ ic*out_h*out_w+ (oh+kh+h)*out_w + (ow+kw+w)+ici];
                                                v2 = __builtin_epi_vbroadcast_2xf32(b[ic * out_h * out_w + (oh + kh + h) * out_w + (ow + kw + w)], vl);
                                                v0 = __builtin_epi_vfmacc_2xf32(v0, v2, v1, vl);
                                            }
                                        }
                                    }
                                    // c[i*l.batch + oc*m + oh*out_h + ow*out_w] += b[i*l.batch + ic*l.c + ih + iw] * a[oc*m + ic*l.c + kh*l.size + kw*l.size];
                                    // c[oc*out_w*out_h + oh*out_w + ow] += b[ ic*out_h*out_w+ ih*out_w + iw] * a[oc*l.c*l.size*l.size + ic*l.size*l.size+ kh*l.size + kw];
                                    // c[j][oc][oh][ow] += b[j][ic][ih][iw] * a[oc][ic][kh][kw];
                                }
                            }
                            for (h = 0; h < rbh; h++)
                            {
                                for (w = 0; w < rbw; w++)
                                {
                                    __builtin_epi_vstore_2xf32(&c[oc * out_w * out_h + (oh + h) * out_w + (ow + w)], v0, vl);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);

    // N batch
    // Output channel
    // Input channel
    // Output height
    // Output width
    // Kernel height
    // Kernel width
}
#else
void forward_convolutional_layer(convolutional_layer l, network net)
{
    int i, j;

    fill_cpu(l.outputs * l.batch, 0, l.output, 1);

    if (l.xnor)
    {
        binarize_weights(l.weights, l.n, l.c / l.groups * l.size * l.size, l.binary_weights);
        swap_binary(&l);
        binarize_cpu(net.input, l.c * l.h * l.w * l.batch, l.binary_input);
        net.input = l.binary_input;
    }

    int m = l.n / l.groups;
    int k = l.size * l.size * l.c / l.groups;
    int n = l.out_w * l.out_h;
    for (i = 0; i < l.batch; ++i)
    {
        for (j = 0; j < l.groups; ++j)
        {
            float *a = l.weights + j * l.nweights / l.groups;
            float *b = net.workspace;
            float *c = l.output + (i * l.groups + j) * n * m;
            float *im = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;

            if (l.size == 1)
            {
                b = im;
            }
            else
            {
                im2col_cpu(im, l.c / l.groups, l.h, l.w, l.size, l.stride, l.pad, b);
            }
            gemm(0, 0, m, n, k, 1, a, k, b, n, 1, c, n);
        }
    }

    if (l.batch_normalize)
    {
        forward_batchnorm_layer(l, net);
    }
    else
    {
        add_bias(l.output, l.biases, l.batch, l.n, l.out_h * l.out_w);
    }

    activate_array(l.output, l.outputs * l.batch, l.activation);
    if (l.binary || l.xnor)
        swap_binary(&l);
}
#endif

void backward_convolutional_layer(convolutional_layer l, network net)
{
    int i, j;
    int m = l.n / l.groups;
    int n = l.size * l.size * l.c / l.groups;
    int k = l.out_w * l.out_h;

    gradient_array(l.output, l.outputs * l.batch, l.activation, l.delta);

    if (l.batch_normalize)
    {
        backward_batchnorm_layer(l, net);
    }
    else
    {
        backward_bias(l.bias_updates, l.delta, l.batch, l.n, k);
    }

    for (i = 0; i < l.batch; ++i)
    {
        for (j = 0; j < l.groups; ++j)
        {
            float *a = l.delta + (i * l.groups + j) * m * k;
            float *b = net.workspace;
            float *c = l.weight_updates + j * l.nweights / l.groups;

            float *im = net.input + (i * l.groups + j) * l.c / l.groups * l.h * l.w;
            float *imd = net.delta + (i * l.groups + j) * l.c / l.groups * l.h * l.w;

            if (l.size == 1)
            {
                b = im;
            }
            else
            {
                im2col_cpu(im, l.c / l.groups, l.h, l.w,
                           l.size, l.stride, l.pad, b);
            }

            gemm(0, 1, m, n, k, 1, a, k, b, k, 1, c, n);

            if (net.delta)
            {
                a = l.weights + j * l.nweights / l.groups;
                b = l.delta + (i * l.groups + j) * m * k;
                c = net.workspace;
                if (l.size == 1)
                {
                    c = imd;
                }

                gemm(1, 0, n, k, m, 1, a, n, b, k, 0, c, k);

                if (l.size != 1)
                {
                    col2im_cpu(net.workspace, l.c / l.groups, l.h, l.w, l.size, l.stride, l.pad, imd);
                }
            }
        }
    }
}

void update_convolutional_layer(convolutional_layer l, update_args a)
{
    float learning_rate = a.learning_rate * l.learning_rate_scale;
    float momentum = a.momentum;
    float decay = a.decay;
    int batch = a.batch;

    axpy_cpu(l.n, learning_rate / batch, l.bias_updates, 1, l.biases, 1);
    scal_cpu(l.n, momentum, l.bias_updates, 1);

    if (l.scales)
    {
        axpy_cpu(l.n, learning_rate / batch, l.scale_updates, 1, l.scales, 1);
        scal_cpu(l.n, momentum, l.scale_updates, 1);
    }

    axpy_cpu(l.nweights, -decay * batch, l.weights, 1, l.weight_updates, 1);
    axpy_cpu(l.nweights, learning_rate / batch, l.weight_updates, 1, l.weights, 1);
    scal_cpu(l.nweights, momentum, l.weight_updates, 1);
}

image get_convolutional_weight(convolutional_layer l, int i)
{
    int h = l.size;
    int w = l.size;
    int c = l.c / l.groups;
    return float_to_image(w, h, c, l.weights + i * h * w * c);
}

void rgbgr_weights(convolutional_layer l)
{
    int i;
    for (i = 0; i < l.n; ++i)
    {
        image im = get_convolutional_weight(l, i);
        if (im.c == 3)
        {
            rgbgr_image(im);
        }
    }
}

void rescale_weights(convolutional_layer l, float scale, float trans)
{
    int i;
    for (i = 0; i < l.n; ++i)
    {
        image im = get_convolutional_weight(l, i);
        if (im.c == 3)
        {
            scale_image(im, scale);
            float sum = sum_array(im.data, im.w * im.h * im.c);
            l.biases[i] += sum * trans;
        }
    }
}

image *get_weights(convolutional_layer l)
{
    image *weights = calloc(l.n, sizeof(image));
    int i;
    for (i = 0; i < l.n; ++i)
    {
        weights[i] = copy_image(get_convolutional_weight(l, i));
        normalize_image(weights[i]);
        /*
           char buff[256];
           sprintf(buff, "filter%d", i);
           save_image(weights[i], buff);
         */
    }
    // error("hey");
    return weights;
}

image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)
{
    image *single_weights = get_weights(l);
    show_images(single_weights, l.n, window);

    image delta = get_convolutional_image(l);
    image dc = collapse_image_layers(delta, 1);
    char buff[256];
    sprintf(buff, "%s: Output", window);
    // show_image(dc, buff);
    // save_image(dc, buff);
    free_image(dc);
    return single_weights;
}
